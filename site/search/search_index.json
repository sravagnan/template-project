{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> FastAPI framework, high performance, easy to learn, fast to code, ready for production </p> <p> </p> <p>Documentation: https://fastapi.tiangolo.com</p> <p>Source Code: https://github.com/tiangolo/fastapi</p> <p>FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints.</p> <p>The key features are:</p> <ul> <li>Fast: Very high performance, on par with NodeJS and Go (thanks to Starlette and Pydantic). One of the fastest Python frameworks available.</li> <li>Fast to code: Increase the speed to develop features by about 200% to 300%. *</li> <li>Fewer bugs: Reduce about 40% of human (developer) induced errors. *</li> <li>Intuitive: Great editor support. Completion everywhere. Less time debugging.</li> <li>Easy: Designed to be easy to use and learn. Less time reading docs.</li> <li>Short: Minimize code duplication. Multiple features from each parameter declaration. Fewer bugs.</li> <li>Robust: Get production-ready code. With automatic interactive documentation.</li> <li>Standards-based: Based on (and fully compatible with) the open standards for APIs: OpenAPI (previously known as Swagger) and JSON Schema.</li> </ul> <p>* estimation based on tests on an internal development team, building production applications.</p>"},{"location":"#sponsors","title":"Sponsors","text":"<p>{% if sponsors %} {% for sponsor in sponsors.gold -%}  {% endfor -%} {%- for sponsor in sponsors.silver -%}  {% endfor %}</p> <p>Other sponsors</p>"},{"location":"#opinions","title":"Opinions","text":"<p>\"[...] I'm using FastAPI a ton these days. [...] I'm actually planning to use it for all of my team's ML services at Microsoft. Some of them are getting integrated into the core Windows product and some Office products.\"</p> Kabir Khan - Microsoft (ref) <p>\"We adopted the FastAPI library to spawn a REST server that can be queried to obtain predictions. [for Ludwig]\"</p> Piero Molino, Yaroslav Dudin, and Sai Sumanth Miryala - Uber (ref) <p>\"Netflix is pleased to announce the open-source release of our crisis management orchestration framework: Dispatch! [built with FastAPI]\"</p> Kevin Glisson, Marc Vilanova, Forest Monsen - Netflix (ref) <p>\"I\u2019m over the moon excited about FastAPI. It\u2019s so fun!\"</p> Brian Okken - Python Bytes podcast host (ref) <p>\"Honestly, what you've built looks super solid and polished. In many ways, it's what I wanted Hug to be - it's really inspiring to see someone build that.\"</p> Timothy Crosley - Hug creator (ref) <p>\"If you're looking to learn one modern framework for building REST APIs, check out FastAPI [...] It's fast, easy to use and easy to learn [...]\"</p> <p>\"We've switched over to FastAPI for our APIs [...] I think you'll like it [...]\"</p> Ines Montani - Matthew Honnibal - Explosion AI founders - spaCy creators (ref) - (ref) <p>\"If anyone is looking to build a production Python API, I would highly recommend FastAPI. It is beautifully designed, simple to use and highly scalable, it has become a key component in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer.\"</p> Deon Pillsbury - Cisco (ref)"},{"location":"#typer-the-fastapi-of-clis","title":"Typer, the FastAPI of CLIs","text":"<p>If you are building a CLI app to be used in the terminal instead of a web API, check out Typer.</p> <p>Typer is FastAPI's little sibling. And it's intended to be the FastAPI of CLIs. \u2328\ufe0f \ud83d\ude80</p>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.7+</p> <p>FastAPI stands on the shoulders of giants:</p> <ul> <li>Starlette for the web parts.</li> <li>Pydantic for the data parts.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install fastapi\n\n---&gt; 100%\n</code></pre> <p>You will also need an ASGI server, for production such as Uvicorn or Hypercorn.</p> <pre><code>$ pip install \"uvicorn[standard]\"\n\n---&gt; 100%\n</code></pre>"},{"location":"#example","title":"Example","text":""},{"location":"#create-it","title":"Create it","text":"<ul> <li>Create a file <code>main.py</code> with:</li> </ul> <pre><code>from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n</code></pre> Or use <code>async def</code>... <p>If your code uses <code>async</code> / <code>await</code>, use <code>async def</code>:</p> <pre><code>from typing import Union\n\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n\n@app.get(\"/\")\nasync def read_root():\nreturn {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\nasync def read_item(item_id: int, q: Union[str, None] = None):\nreturn {\"item_id\": item_id, \"q\": q}\n</code></pre> <p>Note:</p> <p>If you don't know, check the \"In a hurry?\" section about <code>async</code> and <code>await</code> in the docs.</p>"},{"location":"#run-it","title":"Run it","text":"<p>Run the server with:</p> <pre><code>$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> About the command <code>uvicorn main:app --reload</code>... <p>The command <code>uvicorn main:app</code> refers to:</p> <ul> <li><code>main</code>: the file <code>main.py</code> (the Python \"module\").</li> <li><code>app</code>: the object created inside of <code>main.py</code> with the line <code>app = FastAPI()</code>.</li> <li><code>--reload</code>: make the server restart after code changes. Only do this for development.</li> </ul>"},{"location":"#check-it","title":"Check it","text":"<p>Open your browser at http://127.0.0.1:8000/items/5?q=somequery.</p> <p>You will see the JSON response as:</p> <pre><code>{\"item_id\": 5, \"q\": \"somequery\"}\n</code></pre> <p>You already created an API that:</p> <ul> <li>Receives HTTP requests in the paths <code>/</code> and <code>/items/{item_id}</code>.</li> <li>Both paths take <code>GET</code> operations (also known as HTTP methods).</li> <li>The path <code>/items/{item_id}</code> has a path parameter <code>item_id</code> that should be an <code>int</code>.</li> <li>The path <code>/items/{item_id}</code> has an optional <code>str</code> query parameter <code>q</code>.</li> </ul>"},{"location":"#interactive-api-docs","title":"Interactive API docs","text":"<p>Now go to http://127.0.0.1:8000/docs.</p> <p>You will see the automatic interactive API documentation (provided by Swagger UI):</p> <p></p>"},{"location":"#alternative-api-docs","title":"Alternative API docs","text":"<p>And now, go to http://127.0.0.1:8000/redoc.</p> <p>You will see the alternative automatic documentation (provided by ReDoc):</p> <p></p>"},{"location":"#example-upgrade","title":"Example upgrade","text":"<p>Now modify the file <code>main.py</code> to receive a body from a <code>PUT</code> request.</p> <p>Declare the body using standard Python types, thanks to Pydantic.</p> <pre><code>from typing import Union\n\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\napp = FastAPI()\n\n\nclass Item(BaseModel):\nname: str\nprice: float\nis_offer: Union[bool, None] = None\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n\n\n@app.get(\"/items/{item_id}\")\ndef read_item(item_id: int, q: Union[str, None] = None):\n    return {\"item_id\": item_id, \"q\": q}\n\n\n@app.put(\"/items/{item_id}\")\ndef update_item(item_id: int, item: Item):\nreturn {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>The server should reload automatically (because you added <code>--reload</code> to the <code>uvicorn</code> command above).</p>"},{"location":"#interactive-api-docs-upgrade","title":"Interactive API docs upgrade","text":"<p>Now go to http://127.0.0.1:8000/docs.</p> <ul> <li>The interactive API documentation will be automatically updated, including the new body:</li> </ul> <p></p> <ul> <li>Click on the button \"Try it out\", it allows you to fill the parameters and directly interact with the API:</li> </ul> <p></p> <ul> <li>Then click on the \"Execute\" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:</li> </ul> <p></p>"},{"location":"#alternative-api-docs-upgrade","title":"Alternative API docs upgrade","text":"<p>And now, go to http://127.0.0.1:8000/redoc.</p> <ul> <li>The alternative documentation will also reflect the new query parameter and body:</li> </ul> <p></p>"},{"location":"#recap","title":"Recap","text":"<p>In summary, you declare once the types of parameters, body, etc. as function parameters.</p> <p>You do that with standard modern Python types.</p> <p>You don't have to learn a new syntax, the methods or classes of a specific library, etc.</p> <p>Just standard Python 3.7+.</p> <p>For example, for an <code>int</code>:</p> <pre><code>item_id: int\n</code></pre> <p>or for a more complex <code>Item</code> model:</p> <pre><code>item: Item\n</code></pre> <p>...and with that single declaration you get:</p> <ul> <li>Editor support, including:<ul> <li>Completion.</li> <li>Type checks.</li> </ul> </li> <li>Validation of data:<ul> <li>Automatic and clear errors when the data is invalid.</li> <li>Validation even for deeply nested JSON objects.</li> </ul> </li> <li>Conversion of input data: coming from the network to Python data and types. Reading from:<ul> <li>JSON.</li> <li>Path parameters.</li> <li>Query parameters.</li> <li>Cookies.</li> <li>Headers.</li> <li>Forms.</li> <li>Files.</li> </ul> </li> <li>Conversion of output data: converting from Python data and types to network data (as JSON):<ul> <li>Convert Python types (<code>str</code>, <code>int</code>, <code>float</code>, <code>bool</code>, <code>list</code>, etc).</li> <li><code>datetime</code> objects.</li> <li><code>UUID</code> objects.</li> <li>Database models.</li> <li>...and many more.</li> </ul> </li> <li>Automatic interactive API documentation, including 2 alternative user interfaces:<ul> <li>Swagger UI.</li> <li>ReDoc.</li> </ul> </li> </ul> <p>Coming back to the previous code example, FastAPI will:</p> <ul> <li>Validate that there is an <code>item_id</code> in the path for <code>GET</code> and <code>PUT</code> requests.</li> <li>Validate that the <code>item_id</code> is of type <code>int</code> for <code>GET</code> and <code>PUT</code> requests.<ul> <li>If it is not, the client will see a useful, clear error.</li> </ul> </li> <li>Check if there is an optional query parameter named <code>q</code> (as in <code>http://127.0.0.1:8000/items/foo?q=somequery</code>) for <code>GET</code> requests.<ul> <li>As the <code>q</code> parameter is declared with <code>= None</code>, it is optional.</li> <li>Without the <code>None</code> it would be required (as is the body in the case with <code>PUT</code>).</li> </ul> </li> <li>For <code>PUT</code> requests to <code>/items/{item_id}</code>, Read the body as JSON:<ul> <li>Check that it has a required attribute <code>name</code> that should be a <code>str</code>.</li> <li>Check that it has a required attribute <code>price</code> that has to be a <code>float</code>.</li> <li>Check that it has an optional attribute <code>is_offer</code>, that should be a <code>bool</code>, if present.</li> <li>All this would also work for deeply nested JSON objects.</li> </ul> </li> <li>Convert from and to JSON automatically.</li> <li>Document everything with OpenAPI, that can be used by:<ul> <li>Interactive documentation systems.</li> <li>Automatic client code generation systems, for many languages.</li> </ul> </li> <li>Provide 2 interactive documentation web interfaces directly.</li> </ul> <p>We just scratched the surface, but you already get the idea of how it all works.</p> <p>Try changing the line with:</p> <pre><code>    return {\"item_name\": item.name, \"item_id\": item_id}\n</code></pre> <p>...from:</p> <pre><code>        ... \"item_name\": item.name ...\n</code></pre> <p>...to:</p> <pre><code>        ... \"item_price\": item.price ...\n</code></pre> <p>...and see how your editor will auto-complete the attributes and know their types:</p> <p></p> <p>For a more complete example including more features, see the Tutorial - User Guide.</p> <p>Spoiler alert: the tutorial - user guide includes:</p> <ul> <li>Declaration of parameters from other different places as: headers, cookies, form fields and files.</li> <li>How to set validation constraints as <code>maximum_length</code> or <code>regex</code>.</li> <li>A very powerful and easy to use Dependency Injection system.</li> <li>Security and authentication, including support for OAuth2 with JWT tokens and HTTP Basic auth.</li> <li>More advanced (but equally easy) techniques for declaring deeply nested JSON models (thanks to Pydantic).</li> <li>GraphQL integration with Strawberry and other libraries.</li> <li>Many extra features (thanks to Starlette) as:<ul> <li>WebSockets</li> <li>extremely easy tests based on HTTPX and <code>pytest</code></li> <li>CORS</li> <li>Cookie Sessions</li> <li>...and more.</li> </ul> </li> </ul>"},{"location":"#performance","title":"Performance","text":"<p>Independent TechEmpower benchmarks show FastAPI applications running under Uvicorn as one of the fastest Python frameworks available, only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)</p> <p>To understand more about it, see the section Benchmarks.</p>"},{"location":"#optional-dependencies","title":"Optional Dependencies","text":"<p>Used by Pydantic:</p> <ul> <li><code>ujson</code> - for faster JSON \"parsing\".</li> <li><code>email_validator</code> - for email validation.</li> </ul> <p>Used by Starlette:</p> <ul> <li><code>httpx</code> - Required if you want to use the <code>TestClient</code>.</li> <li><code>jinja2</code> - Required if you want to use the default template configuration.</li> <li><code>python-multipart</code> - Required if you want to support form \"parsing\", with <code>request.form()</code>.</li> <li><code>itsdangerous</code> - Required for <code>SessionMiddleware</code> support.</li> <li><code>pyyaml</code> - Required for Starlette's <code>SchemaGenerator</code> support (you probably don't need it with FastAPI).</li> <li><code>ujson</code> - Required if you want to use <code>UJSONResponse</code>.</li> </ul> <p>Used by FastAPI / Starlette:</p> <ul> <li><code>uvicorn</code> - for the server that loads and serves your application.</li> <li><code>orjson</code> - Required if you want to use <code>ORJSONResponse</code>.</li> </ul> <p>You can install all of these with <code>pip install \"fastapi[all]\"</code>.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"about/","title":"Oblivia cretus","text":""},{"location":"about/#digitorum-vale-revocare-babylonia-vulgusque-fulserunt-faciebant","title":"Digitorum vale revocare Babylonia vulgusque fulserunt faciebant","text":"<p>Lorem markdownum lentum ullo viscera partibus celsior, suae, subibat mea tellus et agitabilis sentite. Dignum tum quae tenus casus, pennis, fractarum genuere? Tela antrum, ima has, propiore fulgore, media inmitibus ac ventis, domo. Habes ferarum fretumque, committere certi conditor, monstratum monstra induiturque, erat mentis, suum Aiax.</p> <pre><code>fullCcd.batchMouse(imageWhois);\nif (rootkit_scanner) {\n    youtubeTrojan += 4 + rfid_data(fddi_veronica_token, hover_bit, 3);\n} else {\n    compression = pcmcia_link_supply;\n}\nagpSessionSpooling = bootEmulation(wordartVci, ict(cdMatrixBoot + -4,\n        gis_cursor_router(4)), codecMicrophoneT);\n</code></pre>"},{"location":"about/#non-anili-marmore","title":"Non anili marmore","text":"<p>Nec possit, genu adspicit gentis visa nocuere properata inlisit caritura differt et ter? Et longe coniunx factorum inpia. Sua firmat, et iaces, laudat voce, quicquam. Orbem matrem, sua intra fila ima tum est nec Ecce, manu suus lapides Arctos. Quemque arisque erat umeris.</p> <p>Toto cum, ire tenens miserrimus neque supponere ergo, in avari primique, dedit tamquam pondus medicamine sopita probat. Per in insania Latia doceo manu vivis radix Echidnaeae ancipiti forent pollice inter Peparethos meae est terram imae, vos. Vultus Phoebes sed nunc neque, in crescunt constat; rogat? Leves suae? Illa per.</p>"},{"location":"about/#somnus-sibila-illa-causae","title":"Somnus sibila illa causae","text":"<p>Hydrae tegens servaturis Indigetem nymphas temptemus, precando redunco: nata inanis ergo est; ante loquar meritos: parte. Vim omnia; invidiosa adfusique dedit fugit per. In et Mnemosynen et suas meritis Alcyone equorum: unusque inter inpune et.</p> <ol> <li>Et eget aper repetet</li> <li>Secretasque et torrem efficiens revexit aptato</li> <li>Iam orbis in dictaque utere motibus marinae</li> <li>Servabere tenent dona</li> <li>Quo ne aliud domino tamen secedere madescit</li> <li>Vivitur opemque amissam tractu fixa misit in</li> </ol>"},{"location":"about/#noctes-in-saepe-theseus","title":"Noctes in saepe Theseus","text":"<p>Altera sententia caede concorditer genitus nil dapes terram bis mihi in per Panchaia petit. Solo molli et mollia unus, aut ab mixtum erat tantum languere. Nutantia Nycteida ut nescit Virbius, me vitro, cupidine animas. Cytoriaco traxit pendere ullis torum ferarum culpatque quid stupet mitissima domus atra fons humanas coryli, plurimus paulatim tu exul? Martem arboris.</p> <p>Tenentis turbae pronuba aquilone tangit: vulnere versata, unam suarum Laiades, non. Fratres ipse, haec Typhoea, plus candore en iaculum lignoque fretum arida saxo lyraeque. Sustulit artificum et putat utrumque caelo ipsamque quaesierat Ditis secretasque vicini, mediis.</p> <p>Ire palmas vocat bracchia da, et sagittis timor, fatebar et nova quippe essent alta. Iura Andraemon velis; relictum de queat inania sed summo Cecropidum decimae ingens, metu. Et exponit properant exacta pisce vultus, data bicorni dea florentis culpae animo in et. Condidit tectus ut duri: dum ille Troianaque pedibus recessit spem, suum. Ego plus furori spoliata Astyages et habebat furit tum, amor derecti, cui dextro alto.</p>"},{"location":"user-guide/ciao/","title":"Oblivia cretus","text":""},{"location":"user-guide/ciao/#digitorum-vale-revocare-babylonia-vulgusque-fulserunt-faciebant","title":"Digitorum vale revocare Babylonia vulgusque fulserunt faciebant","text":"<p>Lorem markdownum lentum ullo viscera partibus celsior, suae, subibat mea tellus et agitabilis sentite. Dignum tum quae tenus casus, pennis, fractarum genuere? Tela antrum, ima has, propiore fulgore, media inmitibus ac ventis, domo. Habes ferarum fretumque, committere certi conditor, monstratum monstra induiturque, erat mentis, suum Aiax.</p> <pre><code>fullCcd.batchMouse(imageWhois);\nif (rootkit_scanner) {\n    youtubeTrojan += 4 + rfid_data(fddi_veronica_token, hover_bit, 3);\n} else {\n    compression = pcmcia_link_supply;\n}\nagpSessionSpooling = bootEmulation(wordartVci, ict(cdMatrixBoot + -4,\n        gis_cursor_router(4)), codecMicrophoneT);\n</code></pre>"},{"location":"user-guide/ciao/#non-anili-marmore","title":"Non anili marmore","text":"<p>Nec possit, genu adspicit gentis visa nocuere properata inlisit caritura differt et ter? Et longe coniunx factorum inpia. Sua firmat, et iaces, laudat voce, quicquam. Orbem matrem, sua intra fila ima tum est nec Ecce, manu suus lapides Arctos. Quemque arisque erat umeris.</p> <p>Toto cum, ire tenens miserrimus neque supponere ergo, in avari primique, dedit tamquam pondus medicamine sopita probat. Per in insania Latia doceo manu vivis radix Echidnaeae ancipiti forent pollice inter Peparethos meae est terram imae, vos. Vultus Phoebes sed nunc neque, in crescunt constat; rogat? Leves suae? Illa per.</p>"},{"location":"user-guide/ciao/#somnus-sibila-illa-causae","title":"Somnus sibila illa causae","text":"<p>Hydrae tegens servaturis Indigetem nymphas temptemus, precando redunco: nata inanis ergo est; ante loquar meritos: parte. Vim omnia; invidiosa adfusique dedit fugit per. In et Mnemosynen et suas meritis Alcyone equorum: unusque inter inpune et.</p> <ol> <li>Et eget aper repetet</li> <li>Secretasque et torrem efficiens revexit aptato</li> <li>Iam orbis in dictaque utere motibus marinae</li> <li>Servabere tenent dona</li> <li>Quo ne aliud domino tamen secedere madescit</li> <li>Vivitur opemque amissam tractu fixa misit in</li> </ol>"},{"location":"user-guide/ciao/#noctes-in-saepe-theseus","title":"Noctes in saepe Theseus","text":"<p>Altera sententia caede concorditer genitus nil dapes terram bis mihi in per Panchaia petit. Solo molli et mollia unus, aut ab mixtum erat tantum languere. Nutantia Nycteida ut nescit Virbius, me vitro, cupidine animas. Cytoriaco traxit pendere ullis torum ferarum culpatque quid stupet mitissima domus atra fons humanas coryli, plurimus paulatim tu exul? Martem arboris.</p> <p>Tenentis turbae pronuba aquilone tangit: vulnere versata, unam suarum Laiades, non. Fratres ipse, haec Typhoea, plus candore en iaculum lignoque fretum arida saxo lyraeque. Sustulit artificum et putat utrumque caelo ipsamque quaesierat Ditis secretasque vicini, mediis.</p> <p>Ire palmas vocat bracchia da, et sagittis timor, fatebar et nova quippe essent alta. Iura Andraemon velis; relictum de queat inania sed summo Cecropidum decimae ingens, metu. Et exponit properant exacta pisce vultus, data bicorni dea florentis culpae animo in et. Condidit tectus ut duri: dum ille Troianaque pedibus recessit spem, suum. Ego plus furori spoliata Astyages et habebat furit tum, amor derecti, cui dextro alto.</p>"}]}
